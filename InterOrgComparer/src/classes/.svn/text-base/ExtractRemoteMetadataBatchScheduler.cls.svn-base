global with sharing class ExtractRemoteMetadataBatchScheduler implements Schedulable{
	private string sessionId;
	private string serverUrl;
	private string remoteOrgId; 
	private map<String,String> mapComparisonObjects;
	private list<DynamicCustomField> lstObjectsToCompare;
	 
	public ExtractRemoteMetadataBatchScheduler(string pSessionId, string pServerUrl){
		sessionId = pSessionId;
		serverUrl = pServerUrl;    
	}
	
	public ExtractRemoteMetadataBatchScheduler(string pSessionId, string pServerUrl, string pRemoteOrgId,
	                                     list<DynamicCustomField> plstObjectsToCompare){
		sessionId = pSessionId;
		serverUrl = pServerUrl;
		remoteOrgId = pRemoteOrgId;
		lstObjectsToCompare = plstObjectsToCompare;    
	}
	
	 
	global void execute(SchedulableContext pSchedulableContext)
    { /*
        ObjectMetadata objMetadata = new ObjectMetadata();
		RestResponse restResponse = new RestResponse();
		AddMetadata addMetadata = new AddMetadata();   
		SendRequests sendRequest = new SendRequests();
		JSONMetadataParser jsonMetadataParser = new JSONMetadataParser();
		
		list<ObjectMetadata> objectMetadataList = new list<ObjectMetadata>();
		//getting the session information from cookie values
	 	restResponse = sendRequest.sendMetadataRequest(sessionId, serverUrl); 
		system.debug('RestResponse...QUICK'+restResponse.rest_response_body);
		objectMetadataList = jsonMetadataParser.getSobjectQuickMetadata(restResponse.rest_response_body);
	    system.debug('objectMetadataList...QUICK'+objectMetadataList.size());                                  
		if(!objectMetadataList.isEmpty()){ 
			addMetadata.insertObjectQuickInfo(objectMetadataList);
		}*/
		if(lstObjectsToCompare==null)
    	    Database.executeBatch(new ExtractRemoteMetadataBatch(sessionId, serverUrl, remoteOrgId), 1);
    	else
    	    Database.executeBatch(new ExtractRemoteMetadataBatch(sessionId, serverUrl, remoteOrgId, 
    	                                      lstObjectsToCompare), 1);	
    } 
}